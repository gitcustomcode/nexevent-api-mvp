// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  password     String?
  dateBirth    String?  @map("date_birth")
  document     String?
  phoneCountry String?  @map("phone_country")
  phoneNumber  String?  @map("phone_number")
  profilePhoto String?  @map("profile_photo")
  street       String?
  district     String?
  state        String?
  city         String?
  country      String?
  number       String?
  complement   String?
  cep          String?
  asaasId      String?  @map("asaas_id")
  type         UserType @default(PARTICIPANT)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userFacials      UserFacial[]
  userSocials      UserSocial[]
  userHobbie       UserHobbie[]
  event            Event[]
  balanceHistoric  BalanceHistoric[]
  eventParticipant EventParticipant[]
  termSignatorie   TermSignatorie[]
  Otp              Otp[]

  @@map("users")
}

model UserFacial {
  id             Int      @id @default(autoincrement())
  userId         String   @map("user_id")
  path           String
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_facials")
}

model UserSocial {
  id       Int             @id @default(autoincrement())
  userId   String          @map("user_id")
  network  UserNetworkType
  username String

  user User @relation(fields: [userId], references: [id])

  @@map("user_socials")
}

model UserHobbie {
  id          Int    @id @default(autoincrement())
  userId      String @map("user_id")
  description String
  rating      Int

  user User @relation(fields: [userId], references: [id])

  @@map("user_hobbies")
}

model Otp {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  type           OtpType
  number         Int
  verified       Boolean  @default(false)
  dateExpiration DateTime @map("date_expiration")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("otps")
}

model BalanceHistoric {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  value       Decimal       @db.Decimal(10, 2)
  description String?
  invoiceUrl  String?       @map("invoice_url")
  paymentId   String?       @map("payment_id")
  status      BalanceStatus @default(PENDING)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("balances_historic")
}

model Term {
  id                String   @id @default(uuid())
  name              String
  path              String   @unique
  deadlineAt        DateTime
  autoClose         Boolean  @default(false)
  locale            String   @default("pt-BR")
  sequenceEnabled   Boolean  @default(false)
  remindInterval    String?
  blockAfterRefusal Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  eventTerm EventTerm[]

  @@map("terms")
}

model TermSignatorie {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  auths                   String   @default("api")
  communicateBy           String   @default("whatsapp")
  delivery                String   @default("none")
  handwrittenEnabled      Boolean  @default(false)
  hasDocumentation        Boolean  @default(false)
  livenessEnabled         Boolean  @default(false)
  locationRequiredEnabled Boolean  @default(false)
  officialDocumentEnabled Boolean  @default(false)
  selfieEnabled           Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("term_signatories")
}

model Event {
  id             String      @id @default(uuid())
  userId         String      @map("user_id")
  slug           String      @unique
  sequential     Int
  title          String
  photo          String?
  category       String?
  subtitle       String?
  description    String?
  location       String?
  type           EventType   @default(FREE)
  status         EventStatus @default(ENABLE)
  startAt        DateTime    @map("start_at")
  endAt          DateTime    @map("end_at")
  startPublishAt DateTime    @map("start_publish_at")
  endPublishAt   DateTime    @map("end_publish_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user             User               @relation(fields: [userId], references: [id])
  eventNetwork     EventNetwork[]
  eventCost        EventCost[]
  eventConfig      EventConfig[]
  eventAward       EventAward[]
  eventTicket      EventTicket[]
  eventSchedule    EventSchedule[]
  eventTerm        EventTerm[]
  eventParticipant EventParticipant[]
  EventStaff       EventStaff[]

  @@map("events")
} 

model EventStaff {
  id       String @id @default(uuid())
  eventId  String @map("event_id")
  email    String
  password String
  event    Event  @relation(fields: [eventId], references: [id])

  @@map("event_staffs")
}

model EventSchedule {
  id          Int    @id @default(autoincrement())
  eventId     String @map("event_id")
  date        String
  startHour   String @map("start_hour")
  endHour     String @map("end_hour")
  description String

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_schedule")
}

model EventNetwork {
  id          Int      @id @default(autoincrement())
  eventId     String   @map("event_id")
  network     String
  uri         String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_networks")
}

model EventCost {
  id        Int      @id @default(autoincrement())
  eventId   String   @map("event_id")
  status    Boolean
  cost      Decimal  @db.Decimal(10, 2)
  limit     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_costs")
}

model EventConfig {
  id                  Int            @id @default(autoincrement())
  eventId             String         @unique @map("event_id")
  printAutomatic      Boolean        @default(false) @map("print_automatic")
  credentialType      CredentialType @default(VOID) @map("credential_type")
  participantNetworks Boolean        @default(false) @map("participant_networks")
  limit               Int            @default(20)
  updatedAt           DateTime       @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_configs")
}

model EventTerm {
  id        Int     @id @default(autoincrement())
  eventId   String  @unique
  termId    String
  signature Boolean @default(false)

  event Event @relation(fields: [eventId], references: [id])
  term  Term  @relation(fields: [termId], references: [id])

  @@map("event_terms")
}

model EventAward {
  id          Int      @id @default(autoincrement())
  eventId     String   @map("event_id")
  description String?
  expireDate  DateTime @map("expire_date")
  url         String?
  createdAt   DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_awards")
}

model EventTicket {
  id          String            @id @default(uuid())
  eventId     String            @map("event_id")
  slug        String
  sequential  Int
  title       String
  description String?
  price       Decimal           @db.Decimal(10, 2)
  status      EventTicketStatus @default(ENABLE)
  color       String?
  guest       Int
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  event            Event              @relation(fields: [eventId], references: [id])
  eventTicketGuest EventTicketLink[]
  EventParticipant EventParticipant[]

  @@unique([eventId, slug])
  @@map("event_tickets")
}

model EventTicketLink {
  id            String                @id @default(uuid())
  eventTicketId String                @map("event_ticket_id")
  invite        Int
  status        EventTicketLinkStatus @default(ENABLE)
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")

  eventTicket      EventTicket        @relation(fields: [eventTicketId], references: [id])
  eventParticipant EventParticipant[]

  @@map("event_ticket_links")
}

model EventParticipant {
  id                  String                 @id @default(uuid())
  userId              String                 @map("user_id")
  eventTicketLinkId   String                 @map("event_ticket_link_id")
  eventTicketId       String                 @map("event_ticket_id")
  eventId             String                 @map("event_id")
  sequential          Int
  isSynchronized      Boolean                @default(false) @map("is_synchronized")
  isPrinted           Boolean                @default(false) @map("is_printed")
  signerId            String?                @map("signer_id")
  documentSignerId    String?                @map("document_signer_id")
  requestSignatureKey String?                @map("request_signature_key")
  signature           Boolean                @default(false)
  qrcode              String
  status              EventParticipantStatus @default(AWAITING_FACIAL)
  sendEmailAt         DateTime?              @map("send_email_at")
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @updatedAt @map("updated_at")

  user                     User                       @relation(fields: [userId], references: [id])
  eventTicket              EventTicket                @relation(fields: [eventTicketId], references: [id])
  eventTicketLink          EventTicketLink            @relation(fields: [eventTicketLinkId], references: [id])
  eventParticipantHistoric EventParticipantHistoric[]
  event                    Event                      @relation(fields: [eventId], references: [id])

  @@unique([userId, eventTicketId])
  @@map("event_participants")
}

model EventParticipantHistoric {
  id                 Int                            @id @default(autoincrement())
  eventParticipantId String                         @map("event_participant_id")
  status             EventParticipantHistoricStatus @default(ENABLE)
  createdAt          DateTime                       @default(now()) @map("created_at")
  updatedAt          DateTime                       @updatedAt @map("updated_at")

  eventParticipant EventParticipant @relation(fields: [eventParticipantId], references: [id])

  @@map("event_participant_historic")
}

enum UserType {
  PARTICIPANT
  PRODUCER
}

enum UserNetworkType {
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  SNAPCHAT
  TWITTER
  THREADS
  TIKTOK
  GITHUB
}

enum OtpType {
  RECOVERY
  TWO_AUTH
}

enum BalanceStatus {
  PENDING
  RECEIVED
}

enum EventType {
  FREE
  PAID_OUT
}

enum EventStatus {
  ENABLE
  DISABLE
}

enum CredentialType {
  VOID
  QRCODE
  FACIAL_IN_SITE
  FACIAL
}

enum EventTicketStatus {
  ENABLE
  DISABLE
  FULL
  PART_FULL
}

enum EventTicketLinkStatus {
  ENABLE
  FULL
  PART_FULL
}

enum EventParticipantStatus {
  AWAITING_PAYMENT
  AWAITING_PRINT
  AWAITING_FACIAL
  AWAITING_SIGNATURE
  AWAITING_QUIZ
  COMPLETE
}

enum EventParticipantHistoricStatus {
  CHECK_IN_EARLY
  CHECK_IN
  CHECK_OUT
  CANCELED
  ENABLE
}
