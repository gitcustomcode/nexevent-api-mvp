// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  name             String?
  password         String?
  dateBirth        String?   @map("date_birth")
  document         String?
  phoneCountry     String?   @map("phone_country")
  phoneNumber      String?   @map("phone_number")
  profilePhoto     String?   @map("profile_photo")
  street           String?
  district         String?
  state            String?
  city             String?
  country          String?
  number           String?
  complement       String?
  cep              String?
  stripeCustomerId String?   @map("stripe_customer_id")
  type             UserType  @default(PARTICIPANT)
  validAt          DateTime? @map("valid_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  userFacials              UserFacial[]
  userSocials              UserSocial[]
  userHobbie               UserHobbie[]
  event                    Event[]
  balanceHistoric          BalanceHistoric[]
  eventParticipant         EventParticipant[]
  termSignatorie           TermSignatorie[]
  Otp                      Otp[]
  EventTicketLink          EventTicketLink[]
  UserEventNetworkHistoric UserEventNetworkHistoric[]
  UserTicket               UserTicket[]
  EventQuiz                EventQuiz[]
  EventQuizParticipant     EventQuizParticipant[]

  @@map("users")
}

model UserFacial {
  id             Int      @id @default(autoincrement())
  userId         String   @map("user_id")
  path           String
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_facials")
}

model UserSocial {
  id       Int             @id @default(autoincrement())
  userId   String          @map("user_id")
  network  UserNetworkType
  username String

  user User @relation(fields: [userId], references: [id])

  @@map("user_socials")
}

model UserHobbie {
  id          Int    @id @default(autoincrement())
  userId      String @map("user_id")
  description String
  rating      Int

  user User @relation(fields: [userId], references: [id])

  @@map("user_hobbies")
}

model UserEventNetworkHistoric {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  eventParticipantId String   @map("event_participant_id")
  createdAt          DateTime @default(now()) @map("created_at")

  eventParticipant EventParticipant @relation(fields: [eventParticipantId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@map("user_event_network_historic")
}

model UserTicket {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  eventId            String   @map("event_id")
  eventTicketId      String   @map("event_ticket_id")
  eventTicketPriceId String   @map("event_ticket_price_id")
  qtd                Int
  createdAt          DateTime @default(now()) @map("created_at")

  eventTicketPrice EventTicketPrice  @relation(fields: [eventTicketPriceId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  eventTicket      EventTicket       @relation(fields: [eventTicketId], references: [id])
  event            Event             @relation(fields: [eventId], references: [id])
  EventTicketLink  EventTicketLink[]

  @@map("user_tickets")
}

model Otp {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  type           OtpType
  number         Int
  verified       Boolean  @default(false)
  dateExpiration DateTime @map("date_expiration")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("otps")
}

model BalanceHistoric {
  id                 String        @id @default(uuid())
  userId             String        @map("user_id")
  eventId            String?       @map("event_id")
  eventTicketId      String?
  eventParticipantId String?       @map("event_participant_id")
  value              Decimal       @db.Decimal(10, 2)
  fee                Decimal?      @db.Decimal(10, 2)
  description        String?
  paymentId          String?       @map("payment_id")
  status             BalanceStatus @default(PENDING)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  eventTicket      EventTicket?      @relation(fields: [eventTicketId], references: [id])
  eventParticipant EventParticipant? @relation(fields: [eventParticipantId], references: [id])
  event            Event?            @relation(fields: [eventId], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@map("balances_historic")
}

model Term {
  id                String   @id @default(uuid())
  name              String
  path              String   @unique
  deadlineAt        DateTime
  autoClose         Boolean  @default(false)
  locale            String   @default("pt-BR")
  sequenceEnabled   Boolean  @default(false)
  remindInterval    String?
  blockAfterRefusal Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  eventTerm EventTerm[]

  @@map("terms")
}

model TermSignatorie {
  id                      String   @id @default(uuid())
  userId                  String
  auths                   String   @default("api")
  communicateBy           String   @default("whatsapp")
  delivery                String   @default("none")
  handwrittenEnabled      Boolean  @default(false)
  hasDocumentation        Boolean  @default(false)
  livenessEnabled         Boolean  @default(false)
  locationRequiredEnabled Boolean  @default(false)
  officialDocumentEnabled Boolean  @default(false)
  selfieEnabled           Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("term_signatories")
}

model Event {
  id                String        @id @default(uuid())
  userId            String        @map("user_id")
  slug              String        @unique
  sequential        Int
  title             String
  photo             String?
  category          String?
  description       String?
  location          EventLocation @default(UNDEFINED)
  latitude          String?
  longitude         String?
  address           String?
  country           String?
  city              String?
  state             String?
  complement        String?
  number            String?
  district          String?
  checkoutUrl       String?       @map("checkout_url")
  paymentStatus     String?       @map("payment_status")
  sellOnThePlatform Boolean       @default(false) @map("sell_on_the_platform")
  type              EventType     @default(FREE)
  public            Boolean       @default(true)
  status            EventStatus   @default(ENABLE)
  startAt           DateTime      @map("start_at")
  endAt             DateTime      @map("end_at")
  startPublishAt    DateTime      @map("start_publish_at")
  endPublishAt      DateTime      @map("end_publish_at")
  fullySearch       String        @map("fully_search")
  viewsCount        Int?          @default(0) @map("views_count")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  user             User               @relation(fields: [userId], references: [id])
  eventNetwork     EventNetwork[]
  eventConfig      EventConfig[]
  eventAward       EventAward[]
  eventTicket      EventTicket[]
  eventSchedule    EventSchedule[]
  eventTerm        EventTerm[]
  eventParticipant EventParticipant[]
  EventStaff       EventStaff[]
  eventPhotos      EventPhoto[]
  BalanceHistoric  BalanceHistoric[]
  EventTicketCupom EventTicketCupom[]
  UserTicket       UserTicket[]
  EventQuiz        EventQuiz[]

  @@map("events")
}

model EventPhoto {
  id      String @id @default(uuid())
  eventId String
  url     String

  event Event @relation(fields: [eventId], references: [id])
}

model EventStaff {
  id          String    @id @default(uuid())
  eventId     String    @map("event_id")
  email       String
  password    String
  sendEmailAt DateTime? @map("send_email_at")
  event       Event     @relation(fields: [eventId], references: [id])

  @@map("event_staffs")
}

model EventSchedule {
  id          Int    @id @default(autoincrement())
  eventId     String @map("event_id")
  date        String
  startHour   String @map("start_hour")
  endHour     String @map("end_hour")
  description String

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_schedule")
}

model EventNetwork {
  id          Int      @id @default(autoincrement())
  eventId     String   @map("event_id")
  network     String
  uri         String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_networks")
}

model EventConfig {
  id                  Int            @id @default(autoincrement())
  eventId             String         @unique @map("event_id")
  limit               Int
  printAutomatic      Boolean        @default(false) @map("print_automatic")
  credentialType      CredentialType @default(VOID) @map("credential_type")
  participantNetworks Boolean        @default(false) @map("participant_networks")
  updatedAt           DateTime       @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_configs")
}

model EventTerm {
  id        Int     @id @default(autoincrement())
  eventId   String  @unique
  termId    String
  signature Boolean @default(false)

  event Event @relation(fields: [eventId], references: [id])
  term  Term  @relation(fields: [termId], references: [id])

  @@map("event_terms")
}

model EventAward {
  id          Int      @id @default(autoincrement())
  eventId     String   @map("event_id")
  description String?
  expireDate  DateTime @map("expire_date")
  url         String?
  createdAt   DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_awards")
}

model EventTicket {
  id          String            @id @default(uuid())
  eventId     String            @map("event_id")
  slug        String
  sequential  Int
  title       String
  description String?
  guests      Int?
  isPrivate   Boolean           @default(false) @map("is_private")
  isFree      Boolean           @default(false) @map("is_free")
  isBonus     Boolean           @default(false) @map("is_bonus")
  status      EventTicketStatus @default(ENABLE)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  event            Event              @relation(fields: [eventId], references: [id])
  eventTicketGuest EventTicketLink[]
  EventParticipant EventParticipant[]
  eventTicketPrice EventTicketPrice[]
  eventTicketDays  EventTicketDay[]
  EventTicketBonus EventTicketBonus[]
  BalanceHistoric  BalanceHistoric[]
  TicketCupom      TicketCupom[]
  UserTicket       UserTicket[]

  @@unique([eventId, slug])
  @@map("event_tickets")
}

model TicketCupom {
  id                 String @id @default(uuid())
  eventTicketId      String @map("event_ticket_id")
  eventTicketCupomId String

  eventTicket      EventTicket      @relation(fields: [eventTicketId], references: [id])
  eventTicketCupom EventTicketCupom @relation(fields: [eventTicketCupomId], references: [id])
}

model EventTicketCupom {
  id            String   @id @default(uuid())
  eventId       String?  @map("event_id")
  cupomStripeId String   @map("cupom_stripe_id")
  code          String
  name          String
  percentOff    Int?     @map("percent_off")
  createdAt     DateTime @default(now()) @map("created_at")
  expireAt      DateTime @map("expire_at")

  event       Event?        @relation(fields: [eventId], references: [id])
  TicketCupom TicketCupom[]
}

model EventTicketDay {
  id            Int      @id @default(autoincrement())
  eventTicketId String   @map("event_ticket_id")
  date          DateTime

  eventTicket EventTicket @relation(fields: [eventTicketId], references: [id])

  @@map("event_ticket_days")
}

model EventTicketBonus {
  id                    String @id @default(uuid())
  eventTicketId         String @map("event_ticket_id")
  qtd                   Int
  eventTicketBonusTitle String @map("event_ticket_bonus_title")

  eventTicket EventTicket @relation(fields: [eventTicketId], references: [id])
}

model EventTicketPrice {
  id             String                 @id @default(uuid())
  eventTicketId  String                 @map("event_ticket_id")
  stripePriceId  String?                @map("stripe_price_id")
  status         EventTicketPriceStatus @default(ENABLE)
  isPromotion    Boolean                @default(false) @map("is_promotion")
  batch          Int //lote
  guests         Int
  guestBonus     Int                    @default(0) @map("guest_bonus")
  price          Decimal                @db.Decimal(10, 2)
  passOnFee      Boolean                @default(false) @map("pass_on_fee")
  currency       String?                @default("BRL")
  startPublishAt DateTime               @map("start_publish_at")
  endPublishAt   DateTime               @map("end_publish_at")
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")

  eventTicket      EventTicket        @relation(fields: [eventTicketId], references: [id])
  EventTicketLink  EventTicketLink[]
  EventParticipant EventParticipant[]
  UserTicket       UserTicket[]

  @@map("event_ticket_prices")
}

model EventTicketLink {
  id                 String                @id @default(uuid())
  eventTicketId      String                @map("event_ticket_id")
  eventTicketPriceId String                @map("event_ticket_price_id")
  userId             String?               @map("user_id")
  userTicketId       String?               @map("user_ticket_id")
  isBonus            Boolean?              @default(false) @map("is_bonus")
  invite             Int
  status             EventTicketLinkStatus @default(ENABLE)
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @updatedAt @map("updated_at")

  user             User?              @relation(fields: [userId], references: [id])
  eventTicket      EventTicket        @relation(fields: [eventTicketId], references: [id])
  eventTicketPrice EventTicketPrice   @relation(fields: [eventTicketPriceId], references: [id])
  eventParticipant EventParticipant[]
  userTicket       UserTicket?        @relation(fields: [userTicketId], references: [id])

  @@map("event_ticket_links")
}

model EventParticipant {
  id                  String                 @id @default(uuid())
  userId              String                 @map("user_id")
  eventTicketLinkId   String?                @map("event_ticket_link_id")
  eventTicketPriceId  String                 @map("event_ticket_price_id")
  eventTicketId       String                 @map("event_ticket_id")
  eventId             String                 @map("event_id")
  sequential          Int
  isSynchronized      Boolean                @default(false) @map("is_synchronized")
  isPrinted           Boolean                @default(false) @map("is_printed")
  signerId            String?                @map("signer_id")
  documentSignerId    String?                @map("document_signer_id")
  requestSignatureKey String?                @map("request_signature_key")
  signature           Boolean                @default(false)
  qrcode              String
  status              EventParticipantStatus @default(AWAITING_FACIAL)
  sendEmailAt         DateTime?              @map("send_email_at")
  fullySearch         String?                @map("fully_search")
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @updatedAt @map("updated_at")
  deletedAt           DateTime?

  user                     User                       @relation(fields: [userId], references: [id])
  eventTicket              EventTicket                @relation(fields: [eventTicketId], references: [id])
  eventTicketLink          EventTicketLink?           @relation(fields: [eventTicketLinkId], references: [id])
  eventTicketPrice         EventTicketPrice           @relation(fields: [eventTicketPriceId], references: [id])
  eventParticipantHistoric EventParticipantHistoric[]
  event                    Event                      @relation(fields: [eventId], references: [id])
  BalanceHistoric          BalanceHistoric[]
  UserEventNetworkHistoric UserEventNetworkHistoric[]
  EventQuizParticipant     EventQuizParticipant[]

  @@unique([userId, eventTicketId])
  @@map("event_participants")
}

model EventParticipantHistoric {
  id                 Int                            @id @default(autoincrement())
  eventParticipantId String                         @map("event_participant_id")
  status             EventParticipantHistoricStatus @default(ENABLE)
  createdAt          DateTime                       @default(now()) @map("created_at")
  updatedAt          DateTime                       @updatedAt @map("updated_at")

  eventParticipant EventParticipant @relation(fields: [eventParticipantId], references: [id])

  @@map("event_participant_historic")
}

model EventQuiz {
  id                String          @id @default(uuid())
  eventId           String          @map("event_id")
  userId            String          @map("user_id")
  title             String?
  startAt           DateTime?       @map("start_at")
  endAt             DateTime?       @map("end_at")
  status            EventQuizStatus @default(ENABLE)
  anonimousResponse Boolean?        @default(false) @map("anonimous_response")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  event                Event                  @relation(fields: [eventId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  EventQuizQuestion    EventQuizQuestion[]
  EventQuizParticipant EventQuizParticipant[]

  @@map("event_quiz")
}

model EventQuizQuestion {
  id             String       @id @default(uuid())
  eventQuizId    String       @map("event_quiz_id")
  description    String
  sequential     Int
  questionType   QuestionType @map("question_type")
  isMandatory    Boolean      @default(true) @map("is_mandatory")
  multipleChoice Boolean      @default(false) @map("multiple_choice")

  eventQuiz                    EventQuiz                      @relation(fields: [eventQuizId], references: [id])
  EventQuizParticipantResponse EventQuizParticipantResponse[]

  @@map("event_quiz_questions")
}

model EventQuizQuestionOption {
  id                           String                         @id @default(uuid())
  sequential                   Int
  description                  String
  isOther                      Boolean                        @default(false) @map("is_other")
  other                        String?
  EventQuizParticipantResponse EventQuizParticipantResponse[]
}

model EventQuizParticipant {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  eventQuizId        String  @map("event_quiz_id")
  eventParticipantId String? @map("event_participant_id")
  isAnonimous        Boolean @default(false) @map("is_anonimous")

  eventQuiz                    EventQuiz                      @relation(fields: [eventQuizId], references: [id])
  eventParticipant             EventParticipant?              @relation(fields: [eventParticipantId], references: [id])
  user                         User                           @relation(fields: [userId], references: [id])
  EventQuizParticipantResponse EventQuizParticipantResponse[]
}

model EventQuizParticipantResponse {
  id                        String  @id @default(uuid())
  eventQuizQuestionId       String
  eventQuizParticipantId    String
  eventQuizQuestionOptionId String?
  rating                    Int?
  response                  String?

  eventQuizQuestionOption EventQuizQuestionOption? @relation(fields: [eventQuizQuestionOptionId], references: [id])
  eventQuizQuestion       EventQuizQuestion        @relation(fields: [eventQuizQuestionId], references: [id])
  eventQuizParticipant    EventQuizParticipant     @relation(fields: [eventQuizParticipantId], references: [id])
}

enum UserType {
  PARTICIPANT
  PRODUCER
}

enum UserNetworkType {
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  SNAPCHAT
  TWITTER
  THREADS
  TIKTOK
  GITHUB
}

enum OtpType {
  RECOVERY
  TWO_AUTH
  VERIFY
}

enum BalanceStatus {
  PENDING
  RECEIVED
}

enum EventLocation {
  ONLINE
  UNDEFINED
  DEFINED
}

enum EventType {
  FREE
  PAID_OUT
  PASSED_CLIENT
}

enum EventStatus {
  ENABLE
  DISABLE
}

enum CredentialType {
  VOID
  QRCODE
  FACIAL_IN_SITE
  FACIAL
}

enum EventTicketStatus {
  ENABLE
  DISABLE
}

enum EventTicketPriceStatus {
  ENABLE
  DISABLE
  FULL
  PART_FULL
}

enum EventTicketLinkStatus {
  ENABLE
  FULL
  PART_FULL
}

enum EventParticipantStatus {
  AWAITING_PAYMENT
  AWAITING_PRINT
  AWAITING_FACIAL
  AWAITING_SIGNATURE
  AWAITING_QUIZ
  COMPLETE
}

enum EventParticipantHistoricStatus {
  CHECK_IN_EARLY
  CHECK_IN
  CHECK_OUT
  CANCELED
  ENABLE
}

enum EventQuizStatus {
  ENABLE
  DISABLE
}

enum QuestionType {
  MULTIPLE_CHOICE
  RATING
  DESCRIPTIVE
}
